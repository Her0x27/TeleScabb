# Промпт для разработки Telegram UserBot

## Задача
Разработать полнофункциональный Telegram UserBot на основе официального API клиента Telegram (не Bot API) с бэкендом и фронтендом.

## Технологический стек
- Backend: TypeScript, Node.js
- API: Использовать библиотеку gramjs (TypeScript аналог Telethon) для работы с Telegram API
- REST API: NestJS (TypeScript аналог FastAPI)
- База данных: PostgreSQL с TypeORM
- Frontend: React/Next.js с TypeScript

## Ключевые требования
1. Многозадачность/многопоточность и асинхронность выполнения задач
2. Мульти-клиент (поддержка нескольких сессий Telegram одновременно)
3. Распараллеливание выполняющих задач
4. Модульная архитектура с возможностью горячей загрузки плагинов
5. Обработка различных типов событий Telegram (новые сообщения, изменения статуса, реакции и т.д.)
6. Поддержка команд с префиксом и без префикса
7. Поддержка эмодзи в командах
8. Возможность загрузки контента из внешних API (JSON)
9. Система плейсхолдеров для шаблонизации ответов

## Настройки клиента
Реализовать поддержку всех настроек клиента Telegram:
- timeout: тайм-аут подключения
- request_retries: количество повторов запросов
- connection_retries: количество повторов подключения
- retry_delay: задержка между повторными подключениями
- auto_reconnect: автоматическое переподключение
- sequential_updates: последовательная обработка обновлений
- flood_sleep_threshold: порог для автоматического сна при ошибках флуда
- device_model, system_version, app_version, lang_code, system_lang_code: параметры клиента

## Официальные API ID и Hash
Предусмотреть возможность использования официальных API ID и Hash для различных клиентов Telegram:
- Telegram для Android: API ID: 4, API Hash: 014b35b6184100b085b0d0572f9b5103
- Telegram для iOS: API ID: 3, API Hash: 3e0cb5efcd52300aec5994fdfc5bdc16
- Telegram Desktop: API ID: 2040, API Hash: b18441a1ff607e10a989891a5462e627
- Telegram macOS: API ID: 2834, API Hash: 4b1488f110c6e15d8db8f8f7a58cddd7
- Telegram Web-K: API ID: 2496, API Hash: 8da85b0d5bfe62527e5b244c209159c3
- Telegram Web-Z: API ID: 7893, API Hash: 20a8f98d5edab2727394b99aae829d1a

## Архитектурные принципы
1. Строгое соблюдение принципов ООП (наследование, инкапсуляция, полиморфизм)
2. Использование интерфейсов и абстракций
3. Строгая типизация (TypeScript)
4. Обработка исключений и ошибок на всех уровнях
5. Оптимизация под производительность и отказоустойчивость
6. Модульная архитектура с возможностью расширения

## Документация по разработке плагинов
Создать подробную документацию по разработке плагинов, включающую:
1. Структуру плагина
2. API для взаимодействия с основным приложением
3. Обработка событий Telegram
4. Создание и регистрация команд
5. Работа с базой данных
6. Примеры типовых плагинов

## Требования к коду
1. Только production-ready код
2. Никаких моков, заглушек, фейковых данных или временных решений
3. Реальные API, реальные источники данных, реальные зависимости
4. Полностью работоспособные модули, классы и функции
5. Реальное взаимодействие с БД, сетью, файловой системой
